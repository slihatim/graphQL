type Comment {
    commentId: ID
    commentMessage: String
    commentOwnerId: String
    commentPostId: String
    commentPublishDate: String
}

type Location {
    locationId : ID
    locationStreet : String
    locationCity : String
    locationState : String
    locationCountry : String
    locationTimezone : String
}

type Post {
    postId: ID
    postText: String
    postImage: String
    postLikes: Int
    postLink: String
    postTags: [String]
    postPublishDate: String
    postOwnerId: String
}

type Query {
    # comment
    getAllComments(page: Int=0, limit: Int=20) : [Comment]
    getSingleComment(id: ID) : Comment
    getCommentsByPost(postId: ID, page: Int=0, limit: Int=20) : [Comment]
    getCommentsByUser(userId: ID, page: Int=0, limit: Int=20) : [Comment]

    # location
    singleLocation(locationId: ID) : Location
    allLocations(page: Int=0, limit: Int=20): [Location]

    # post
    allPosts(page: Int=0, limit: Int=20): [Post]
    findPostsByUserId(userId: String, page: Int=0, limit: Int=20): [Post]
    findPostsByTag(tagName: String, page: Int=0, limit: Int=20): [Post]
    singlePost(id: ID): Post
    searchPosts(query: String, page: Int=0, limit: Int=20): [Post]
}

type Mutation {
    # comment
    createComment(commentMessage: String!, commentOwnerId: String!, commentPostId: String!, commentPublishDate: String) : Comment
    updateComment(id: ID!, commentMessage: String!) : Comment
    deleteComment(id: ID!) : ID

    # location
    createLocation(locationStreet: String, locationCity: String, locationState: String, locationCountry: String, locationTimezone: String): Location
    updateLocation(locationId: ID!, locationStreet: String, locationCity: String, locationState: String, locationCountry: String, locationTimezone: String): Location
    deleteLocation(locationId: ID!): ID

    # post
    createPost(postText: String!, postImage: String, postLikes: Int, postLink: String, postTags: [String], postPublishDate: String, postOwnerId: String!): Post
    updatePost(id: ID!, postText: String, postImage: String, postLikes: Int, postLink: String, postTags: [String]): Post
    deletePost(id: ID!): ID

}